import tensorflow as tf


INPUT_NODE = 6
OUTPUT_NODE = 6

LAYER1_NODE = 30
LAYER2_NODE = 30
LAYER3_NODE = 30
LAYER4_NODE = 30
LAYER5_NODE = 30
LAYER6_NODE = 30
LAYER7_NODE = 30
LAYER8_NODE = 30
LAYER9_NODE = 30
LAYER10_NODE = 30


def get_weight_variable(shape, regularizer):
    weights = tf.get_variable(
        "weights", shape,
        initializer=tf.truncated_normal_initializer(stddev=0.1))
    if regularizer != None:
        tf.add_to_collection('errors', regularizer(weights))
    return weights


def inference(input_tensor, regularizer):
    with tf.variable_scope('layer1'):
        weights = get_weight_variable(
            [INPUT_NODE, LAYER1_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER1_NODE],
            initializer=tf.constant_initializer(0.0))
        layer1 = prelu(tf.matmul(input_tensor, weights) + biases)

    with tf.variable_scope('layer2'):
        weights = get_weight_variable(
            [LAYER1_NODE, LAYER2_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER2_NODE],
            initializer=tf.constant_initializer(0.0))
        layer2 = prelu(tf.matmul(layer1, weights) + biases)

    with tf.variable_scope('layer3'):
        weights = get_weight_variable(
            [LAYER2_NODE, LAYER3_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER3_NODE],
            initializer=tf.constant_initializer(0.0))
        layer3 = prelu(tf.matmul(layer2, weights) + biases)

    with tf.variable_scope('layer4'):
        weights = get_weight_variable(
            [LAYER3_NODE, LAYER4_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER4_NODE],
            initializer=tf.constant_initializer(0.0))
        layer4 = prelu(tf.matmul(layer3, weights) + biases)

    with tf.variable_scope('layer5'):
        weights = get_weight_variable(
            [LAYER4_NODE, LAYER5_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER5_NODE],
            initializer=tf.constant_initializer(0.0))
        layer5 = prelu(tf.matmul(layer4, weights) + biases)

    with tf.variable_scope('layer6'):
        weights = get_weight_variable(
            [LAYER5_NODE, LAYER6_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER6_NODE],
            initializer=tf.constant_initializer(0.0))
        layer6 = prelu(tf.matmul(layer5, weights) + biases)

    with tf.variable_scope('layer7'):
        weights = get_weight_variable(
            [LAYER6_NODE, LAYER7_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER7_NODE],
            initializer=tf.constant_initializer(0.0))
        layer7 = prelu(tf.matmul(layer6, weights) + biases)

    with tf.variable_scope('layer8'):
        weights = get_weight_variable(
            [LAYER7_NODE, LAYER8_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER8_NODE],
            initializer=tf.constant_initializer(0.0))
        layer8 = prelu(tf.matmul(layer7, weights) + biases)

    with tf.variable_scope('layer9'):
        weights = get_weight_variable(
            [LAYER8_NODE, LAYER9_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER9_NODE],
            initializer=tf.constant_initializer(0.0))
        layer9 = prelu(tf.matmul(layer8, weights) + biases)

    with tf.variable_scope('layer10'):
        weights = get_weight_variable(
            [LAYER9_NODE, LAYER10_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [LAYER10_NODE],
            initializer=tf.constant_initializer(0.0))
        layer10 = prelu(tf.matmul(layer9, weights) + biases)

    with tf.variable_scope('layer11'):
        weights = get_weight_variable(
            [LAYER10_NODE, OUTPUT_NODE], regularizer)
        biases = tf.get_variable(
            "biases", [OUTPUT_NODE],
            initializer=tf.constant_initializer(0.0))
        layer11 = tf.matmul(layer10, weights) + biases

    return layer11


def prelu(_x):
    pp = (tf.nn.relu(_x) - tf.nn.relu(0.00001 * _x))
    return pp

